# calculate some background information on ventilation
require 'require_all'
require_relative '../../lib/dashboard.rb'
require_rel '../../test_support'

module Logging
  @logger = Logger.new('log/default profile calculation ' + Time.now.strftime('%H %M') + '.log')
  logger.level = :debug
end

def school_factory
  $SCHOOL_FACTORY ||= SchoolFactory.new
end

class CalculateAverageSchool
  def initialize(schools)
    @schools = electric_schools_with_enough_data(schools)
    @school_type_samples = calculate_school_type_samples
  end

  def save_average_school_data_to_ruby_file(type_data, filename = 'Results\average_school_data.rb')
    File.open(filename, 'w') do |f|
      f.puts '# code auto generated by script\modelling\generate_average_school.rb'
      f.puts 'class AverageSchoolData'
      f.puts '  def raw_data'
      f.puts '    {'
      type_data.each do |benchmark_type, data|
        f.puts "     #{benchmark_type}: {"
        data.each do |school_type, daytype_data|
          f.puts "      #{school_type}: {"
          f.puts "        samples: #{@school_type_samples[school_type]},"
          daytype_data.each do |daytype, months_data|
            f.puts "        #{daytype}: {"
            months_data.sort.each do |month, amr_x48|
              f.puts "          #{sprintf('%2d',month)} => [ # average 48x intraday kWh/pupil readings for month"
              save_amr_data_x48(f, amr_x48)
              f.puts '                ],'
            end
            f.puts '        },'
          end
          f.puts '      },'
        end
        f.puts '     },'
      end
      f.puts '    }'
      f.puts '  end'
      f.puts 'end'
    end
  end

  def save_average_school_data_to_csv(type_data, filename = 'Results\average_school_data.csv')
    CSV.open(filename, 'w') do |csv|
      type_data.each do |benchmark_type, data|
        data.each do |school_type, daytype_data|
          daytype_data.each do |daytype, months_data|
            months_data.sort.each do |month, amr_x48|
              csv << [benchmark_type, school_type, daytype, month, amr_x48.values].flatten
            end
          end
        end
      end
    end
  end

  def save_amr_data_x48(f, amr_x48, indent = '                  ')
    formatted_amr = amr_x48.values.map { |kwh| sprintf('%0.6f', kwh) }
    formatted_amr.each_slice(8) do |four_hours|
      f.puts "#{indent} #{four_hours.join(',')},"
    end
  end

  def calculate_average_school(type: :benchmark, rank_range: 0.2..0.4)
    school_averages = calculate_school_averages
    by_school_type = group_by_school_types(school_averages)
    { type => average_by_type_within_rank_range(by_school_type, rank_range) }
  end

  def calculate_school_type_samples
    type_total = {}

    @schools.each do |school|
      type_total[school.school_type] ||= 0
      type_total[school.school_type] += 1
    end

    type_total
  end

  def calculate_school_averages
    school_results = []

    @schools.map do |school|
      meter = school.aggregated_electricity_meters
      end_date = meter.amr_data.end_date
      start_date = [end_date - 365, meter.amr_data.start_date].max
      {
        school_name:  school.name,
        school_type:  school.school_type,
        monthly_data: calculate_monthly_average_profiles(school, meter, start_date, end_date)
      }
    end
  end

  private

  def electric_schools_with_enough_data(schools)
    schools.select do |school|
      !school.aggregate_meter(:electricity).nil? && school.aggregated_electricity_meters.amr_data.days > 50
    end
  end

  def group_by_school_types(school_averages)
    by_type = {}

    school_averages.each do |school_data|
      by_type[school_data[:school_type]] ||= [] 
      by_type[school_data[:school_type]].push(school_data)
    end

    by_type
  end

  def average_by_type_within_rank_range(by_school_type, rank_range)
    data_by_type_then_month_then_half_hour = group_by_type_then_month_then_half_hour(by_school_type)

    data =  {}

    data_by_type_then_month_then_half_hour.each do |school_type, data_type_data|
      data_type_data.each do |daytype, months_data|
        months_data.each do |month, half_hour_data|
          half_hour_data.each do |half_hour, hh_kwh_xN|
            sample_range = index_range_from_rank_range(hh_kwh_xN.length, rank_range)

            to_average = hh_kwh_xN.sort[sample_range]

            next if to_average.nil? || to_average.length < 1

            avg = to_average.sum / to_average.length

            data[school_type] ||= {}
            data[school_type][daytype] ||= {}
            data[school_type][daytype][month] ||= {}
            data[school_type][daytype][month][half_hour] = avg
          end
        end
      end
    end

    data
  end

  def index_range_from_rank_range(length, rank_range)
    index_range_low  = (length * rank_range.first).to_i
    index_range_high = (length * rank_range.last).to_i
    index_range_low..index_range_high
  end

  def group_by_type_then_month_then_half_hour(by_school_type)
    data = group_by_type_then_month(by_school_type)

    data_by_month_half_hour = {}
    
    data.each do |school_type, data_type_data|
      data_type_data.each do |daytype, schools_data|
        schools_data.each do |school_data|
          (1..12).each do |month|
            (0..47).each do |half_hour|
              amr_x48 = school_data.dig(:amr_xN_x48, month)
              unless amr_x48.nil?
                data_by_month_half_hour[school_type] ||= {}
                data_by_month_half_hour[school_type][daytype] ||= {}
                data_by_month_half_hour[school_type][daytype][month] ||= {}
                data_by_month_half_hour[school_type][daytype][month][half_hour] ||= []
                data_by_month_half_hour[school_type][daytype][month][half_hour].push(amr_x48[half_hour])
              end
            end
          end
        end
      end
    end

    data_by_month_half_hour
  end

  def group_by_type_then_month(by_school_type)
    data = {}

    by_school_type.each do |school_type, schools|
      data[school_type] ||= {}
      schools.each do |school|
        school[:monthly_data].each do |month, amr_x48|
          data[school_type][month] ||= []
          data[school_type][month].push({school_name: school[:school_name], amr_xN_x48: amr_x48})
        end
      end
    end

    data
  end

  def calculate_monthly_average_profiles(school, meter, start_date, end_date)
    collated_data = collate_data(school, meter, start_date, end_date)
    average_data(collated_data, school.number_of_pupils)
  end

  def collate_data(school, meter, start_date, end_date)
    data = { schoolday: {}, holiday: {}, weekend: {} }

    (start_date..end_date).each do |date|
      daytype = school.holidays.day_type(date)
      month = date.month
      data[daytype][month] = [] unless data[daytype].key?(month)
      data[daytype][month].push(meter.amr_data.days_kwh_x48(date))
    end

    data
  end

  def average_data(collated_data, number_of_pupils)
    data = { schoolday: {}, holiday: {}, weekend: {} }

    collated_data.each do |daytype, months|
      months.each do |month, amr_data_x48_x30|
        data[daytype][month] = AMRData.fast_multiply_x48_x_scalar(AMRData.fast_average_multiple_x48(amr_data_x48_x30), 1.0/number_of_pupils)
      end
    end

    data
  end
end

def load_schools(pattern_match) 
  source_db = :unvalidated_meter_data

  results = {}

  school_names = RunTests.resolve_school_list(source_db, pattern_match)

  schools = school_names.map do |school_name|
    school = school_factory.load_or_use_cached_meter_collection(:name, school_name, source_db)
  rescue => e
    puts e.message
    puts e.backtrace
  end
end

def test_calculate_average_school
  source_db = :unvalidated_meter_data
  school_names = RunTests.resolve_school_list(source_db, ['trini*'])
  school = school_factory.load_or_use_cached_meter_collection(:name, school_names[0], source_db)
  avg = AverageSchoolCalculator.new(school)
  amr_data = avg.benchmark_amr_data
  puts "#{amr_data.start_date} #{amr_data.end_date} #{amr_data.total}"
end

test_calculate_average_school

exit
school_name_pattern_match = ['*']

schools = load_schools(school_name_pattern_match)

calc = CalculateAverageSchool.new(schools)

benchmark_data = calc.calculate_average_school(type: :benchmark, rank_range: 0.2..0.4)
exemplar_data  = calc.calculate_average_school(type: :exemplar,  rank_range: 0.1..0.25)

combined_data = benchmark_data.merge(exemplar_data)

calc.save_average_school_data_to_ruby_file(combined_data)
calc.save_average_school_data_to_csv(combined_data)
